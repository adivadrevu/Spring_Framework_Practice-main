{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \ul \ulc0 SPRING FRAMEWORK:\
\

\f1\b0 \ulnone -> Invertion of Control (Inc) = A software design principle that gives control of an application flowto an external source(SPRING) rather than application code. \
\
-> Target class = A class which uses other class services/methods or a business logic  is called Target class.\
\
-> Dependency Object = Services which are used inside the Target class is called Dependency Object.\
\
-> Dependency Injection = Injecting Dependent Object into Target class. \
\
-> Setter Injection = Injecting an object into the Target class using \'93Setter\'94 is called Setter Injection.\
\
-> Constructor Injection = Injecting an object into the Target class using \'93Constructor\'94 is called Constructor Injection. \
\
\
\
All the above logic is shown in Code format. Please check @\'93 SpringCore1\'94 for the code. \
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\
}